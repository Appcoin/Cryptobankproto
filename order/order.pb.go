// Code generated by protoc-gen-gogo.
// source: github.com/crypto-bank/proto/order/order.proto
// DO NOT EDIT!

/*
	Package order is a generated protocol buffer package.

	It is generated from these files:
		github.com/crypto-bank/proto/order/order.proto

	It has these top-level messages:
		Order
		Trade
*/
package order

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf1 "github.com/gogo/protobuf/types"
import exchange "github.com/crypto-bank/proto/exchange"
import currency "github.com/crypto-bank/proto/currency"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Type - Type of an order.
// An `ask` (sell) or a `bid` (buy).
type Type int32

const (
	Ask Type = 0
	Bid Type = 1
)

var Type_name = map[int32]string{
	0: "ASK",
	1: "BID",
}
var Type_value = map[string]int32{
	"ASK": 0,
	"BID": 1,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorOrder, []int{0} }

// Order - Cryptocurrency order.
type Order struct {
	// Type - Type of an order.
	Type Type `protobuf:"varint,1,opt,name=type,proto3,enum=order.Type" json:"type,omitempty"`
	// Volume - Volume of currency ordered.
	Volume *currency.Volume `protobuf:"bytes,2,opt,name=volume" json:"volume,omitempty"`
	// Rate - Currency price rate.
	Rate *currency.Volume `protobuf:"bytes,3,opt,name=rate" json:"rate,omitempty"`
	// Exchange - Identifier of an exchange.
	Exchange exchange.Exchange `protobuf:"varint,4,opt,name=exchange,proto3,enum=exchange.Exchange" json:"exchange,omitempty"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{0} }

func (m *Order) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Ask
}

func (m *Order) GetVolume() *currency.Volume {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *Order) GetRate() *currency.Volume {
	if m != nil {
		return m.Rate
	}
	return nil
}

func (m *Order) GetExchange() exchange.Exchange {
	if m != nil {
		return m.Exchange
	}
	return exchange.Poloniex
}

// Trade - New trade.
type Trade struct {
	// ID - ID of a trade.
	// This ID is unique in scope of exchange only.
	ID int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Order - Order traded.
	Order *Order `protobuf:"bytes,2,opt,name=order" json:"order,omitempty"`
	// Time - Time of an order.
	Time *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=time" json:"time,omitempty"`
}

func (m *Trade) Reset()                    { *m = Trade{} }
func (m *Trade) String() string            { return proto.CompactTextString(m) }
func (*Trade) ProtoMessage()               {}
func (*Trade) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{1} }

func (m *Trade) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Trade) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *Trade) GetTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func init() {
	proto.RegisterType((*Order)(nil), "order.Order")
	proto.RegisterType((*Trade)(nil), "order.Trade")
	proto.RegisterEnum("order.Type", Type_name, Type_value)
}
func (this *Order) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Order)
	if !ok {
		that2, ok := that.(Order)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Volume.Equal(that1.Volume) {
		return false
	}
	if !this.Rate.Equal(that1.Rate) {
		return false
	}
	if this.Exchange != that1.Exchange {
		return false
	}
	return true
}
func (this *Trade) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Trade)
	if !ok {
		that2, ok := that.(Trade)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if !this.Order.Equal(that1.Order) {
		return false
	}
	if !this.Time.Equal(that1.Time) {
		return false
	}
	return true
}
func (m *Order) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.Type))
	}
	if m.Volume != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.Volume.Size()))
		n1, err := m.Volume.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Rate != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.Rate.Size()))
		n2, err := m.Rate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Exchange != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.Exchange))
	}
	return i, nil
}

func (m *Trade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trade) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.ID))
	}
	if m.Order != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.Order.Size()))
		n3, err := m.Order.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Time != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.Time.Size()))
		n4, err := m.Time.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeFixed64Order(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Order(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintOrder(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Order) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovOrder(uint64(m.Type))
	}
	if m.Volume != nil {
		l = m.Volume.Size()
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Rate != nil {
		l = m.Rate.Size()
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Exchange != 0 {
		n += 1 + sovOrder(uint64(m.Exchange))
	}
	return n
}

func (m *Trade) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovOrder(uint64(m.ID))
	}
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func sovOrder(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOrder(x uint64) (n int) {
	return sovOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Order) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Order: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Order: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Volume == nil {
				m.Volume = &currency.Volume{}
			}
			if err := m.Volume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rate == nil {
				m.Rate = &currency.Volume{}
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exchange", wireType)
			}
			m.Exchange = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exchange |= (exchange.Exchange(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Trade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &Order{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = &google_protobuf1.Timestamp{}
			}
			if err := m.Time.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOrder
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOrder
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOrder(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOrder = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrder   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("github.com/crypto-bank/proto/order/order.proto", fileDescriptorOrder) }

var fileDescriptorOrder = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4b, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0x2e, 0xaa, 0x2c, 0x28, 0xc9, 0xd7, 0x4d, 0x4a,
	0xcc, 0xcb, 0xd6, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0xcf, 0x2f, 0x4a, 0x49, 0x2d, 0x82, 0x90,
	0x7a, 0x60, 0x11, 0x21, 0x56, 0x30, 0x47, 0x4a, 0x17, 0x49, 0x5b, 0x7a, 0x7e, 0x7a, 0x3e, 0x44,
	0x7d, 0x52, 0x69, 0x1a, 0x98, 0x07, 0xd1, 0x0c, 0x62, 0x41, 0x74, 0x49, 0x39, 0xe2, 0x54, 0x8e,
	0xa4, 0x2f, 0x3f, 0x3d, 0x27, 0x15, 0xc1, 0x2f, 0xc9, 0xcc, 0x4d, 0x2d, 0x2e, 0x49, 0xcc, 0x2d,
	0x80, 0x1a, 0x61, 0x82, 0xd7, 0xa1, 0xa9, 0x15, 0xc9, 0x19, 0x89, 0x79, 0xe9, 0xa9, 0x70, 0x06,
	0x51, 0xba, 0x92, 0x4b, 0x8b, 0x8a, 0x52, 0xf3, 0x92, 0x2b, 0xe1, 0x0c, 0x88, 0x2e, 0xa5, 0x2e,
	0x46, 0x2e, 0x56, 0x7f, 0x90, 0x3f, 0x85, 0x24, 0xb9, 0x58, 0x4a, 0x2a, 0x0b, 0x52, 0x25, 0x18,
	0x15, 0x18, 0x35, 0xf8, 0x8c, 0xb8, 0xf5, 0x20, 0x41, 0x11, 0x52, 0x59, 0x90, 0x2a, 0xa4, 0xc0,
	0xc5, 0x56, 0x96, 0x9f, 0x53, 0x9a, 0x9b, 0x2a, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x6d, 0x24, 0xa0,
	0x07, 0x37, 0x25, 0x0c, 0x2c, 0x2e, 0x24, 0xc7, 0xc5, 0x52, 0x94, 0x58, 0x92, 0x2a, 0xc1, 0x8c,
	0x43, 0x5e, 0x85, 0x8b, 0x03, 0xe6, 0x5c, 0x09, 0x16, 0xb0, 0x05, 0x42, 0x7a, 0x70, 0xf7, 0xbb,
	0x42, 0x19, 0x4a, 0x49, 0x5c, 0xac, 0x21, 0x45, 0x89, 0x29, 0xa9, 0x42, 0x42, 0x5c, 0x4c, 0x99,
	0x29, 0x60, 0x97, 0x30, 0x3b, 0xb1, 0x3d, 0xba, 0x27, 0xcf, 0xe4, 0xe9, 0x22, 0x24, 0xcd, 0x05,
	0x89, 0x10, 0xa8, 0x1b, 0x78, 0xa0, 0x0e, 0x84, 0x38, 0x5e, 0x83, 0x8b, 0x05, 0x14, 0x8a, 0x50,
	0xfb, 0xa5, 0xf4, 0x20, 0x41, 0xac, 0x07, 0x0b, 0x62, 0xbd, 0x10, 0x58, 0x10, 0x6b, 0x19, 0x70,
	0xb1, 0x80, 0xfd, 0x24, 0xc0, 0xc5, 0xec, 0x18, 0xec, 0x2d, 0xc0, 0x20, 0xc5, 0xde, 0x35, 0x57,
	0x81, 0xd9, 0xb1, 0x38, 0x1b, 0x24, 0xe2, 0xe4, 0xe9, 0x22, 0xc0, 0x08, 0x11, 0x71, 0xca, 0x4c,
	0x91, 0x62, 0xe9, 0x58, 0x2c, 0xc7, 0xe0, 0x24, 0xb2, 0xe2, 0x91, 0x1c, 0xe3, 0x89, 0x47, 0x72,
	0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0x43, 0x12, 0x1b,
	0xd8, 0x6c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x9d, 0x73, 0x53, 0x56, 0x02, 0x00,
	0x00,
}
