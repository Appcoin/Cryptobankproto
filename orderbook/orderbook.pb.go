// Code generated by protoc-gen-gogo.
// source: github.com/crypto-bank/proto/orderbook/orderbook.proto
// DO NOT EDIT!

/*
	Package orderbook is a generated protocol buffer package.

	It is generated from these files:
		github.com/crypto-bank/proto/orderbook/orderbook.proto
		github.com/crypto-bank/proto/orderbook/event.proto

	It has these top-level messages:
		ReadRequest
		Event
		BatchEvents
*/
package orderbook

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf1 "github.com/gogo/protobuf/types"
import exchange "github.com/crypto-bank/proto/exchange"
import currency "github.com/crypto-bank/proto/currency"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ReadRequest - Order book read request.
// It can be a real-time or historical data request.
type ReadRequest struct {
	// Pair - Currency pair.
	Pair *currency.Pair `protobuf:"bytes,1,opt,name=pair" json:"pair,omitempty"`
	// Exchange - Identifier of an exchange.
	Exchange exchange.Exchange `protobuf:"varint,2,opt,name=exchange,proto3,enum=exchange.Exchange" json:"exchange,omitempty"`
	// Start - Time of a first order to read.
	// If it is zero it will start reading from first record.
	Start *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=start" json:"start,omitempty"`
	// End - Time of a last order to read.
	// `Zero` will indicate we want to read until the end,
	// in case of historical data it will be last existing trade,
	// in case of real-time data it will stream updates forever.
	End *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=end" json:"end,omitempty"`
	// MaxBatchSize - Maximum size of a single batch sent.
	MaxBatchSize int64 `protobuf:"varint,5,opt,name=max_batch_size,proto3" json:"max_batch_size,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptorOrderbook, []int{0} }

func (m *ReadRequest) GetPair() *currency.Pair {
	if m != nil {
		return m.Pair
	}
	return nil
}

func (m *ReadRequest) GetExchange() exchange.Exchange {
	if m != nil {
		return m.Exchange
	}
	return exchange.Poloniex
}

func (m *ReadRequest) GetStart() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *ReadRequest) GetEnd() *google_protobuf1.Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *ReadRequest) GetMaxBatchSize() int64 {
	if m != nil {
		return m.MaxBatchSize
	}
	return 0
}

func init() {
	proto.RegisterType((*ReadRequest)(nil), "orderbook.ReadRequest")
}
func (this *ReadRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ReadRequest)
	if !ok {
		that2, ok := that.(ReadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Pair.Equal(that1.Pair) {
		return false
	}
	if this.Exchange != that1.Exchange {
		return false
	}
	if !this.Start.Equal(that1.Start) {
		return false
	}
	if !this.End.Equal(that1.End) {
		return false
	}
	if this.MaxBatchSize != that1.MaxBatchSize {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OrderBook service

type OrderBookClient interface {
	// Read - Starts streaming real-time updates of an order book,
	// and all trades happening in real-time.
	// Batches are sent in `MaxBatchSize` when reading from history,
	// or in received size in real-time when live streaming.
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (OrderBook_ReadClient, error)
}

type orderBookClient struct {
	cc *grpc.ClientConn
}

func NewOrderBookClient(cc *grpc.ClientConn) OrderBookClient {
	return &orderBookClient{cc}
}

func (c *orderBookClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (OrderBook_ReadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_OrderBook_serviceDesc.Streams[0], c.cc, "/orderbook.OrderBook/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderBookReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderBook_ReadClient interface {
	Recv() (*BatchEvents, error)
	grpc.ClientStream
}

type orderBookReadClient struct {
	grpc.ClientStream
}

func (x *orderBookReadClient) Recv() (*BatchEvents, error) {
	m := new(BatchEvents)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for OrderBook service

type OrderBookServer interface {
	// Read - Starts streaming real-time updates of an order book,
	// and all trades happening in real-time.
	// Batches are sent in `MaxBatchSize` when reading from history,
	// or in received size in real-time when live streaming.
	Read(*ReadRequest, OrderBook_ReadServer) error
}

func RegisterOrderBookServer(s *grpc.Server, srv OrderBookServer) {
	s.RegisterService(&_OrderBook_serviceDesc, srv)
}

func _OrderBook_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderBookServer).Read(m, &orderBookReadServer{stream})
}

type OrderBook_ReadServer interface {
	Send(*BatchEvents) error
	grpc.ServerStream
}

type orderBookReadServer struct {
	grpc.ServerStream
}

func (x *orderBookReadServer) Send(m *BatchEvents) error {
	return x.ServerStream.SendMsg(m)
}

var _OrderBook_serviceDesc = grpc.ServiceDesc{
	ServiceName: "orderbook.OrderBook",
	HandlerType: (*OrderBookServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _OrderBook_Read_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/crypto-bank/proto/orderbook/orderbook.proto",
}

func (m *ReadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pair != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrderbook(dAtA, i, uint64(m.Pair.Size()))
		n1, err := m.Pair.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Exchange != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOrderbook(dAtA, i, uint64(m.Exchange))
	}
	if m.Start != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOrderbook(dAtA, i, uint64(m.Start.Size()))
		n2, err := m.Start.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.End != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOrderbook(dAtA, i, uint64(m.End.Size()))
		n3, err := m.End.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.MaxBatchSize != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintOrderbook(dAtA, i, uint64(m.MaxBatchSize))
	}
	return i, nil
}

func encodeFixed64Orderbook(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Orderbook(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintOrderbook(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReadRequest) Size() (n int) {
	var l int
	_ = l
	if m.Pair != nil {
		l = m.Pair.Size()
		n += 1 + l + sovOrderbook(uint64(l))
	}
	if m.Exchange != 0 {
		n += 1 + sovOrderbook(uint64(m.Exchange))
	}
	if m.Start != nil {
		l = m.Start.Size()
		n += 1 + l + sovOrderbook(uint64(l))
	}
	if m.End != nil {
		l = m.End.Size()
		n += 1 + l + sovOrderbook(uint64(l))
	}
	if m.MaxBatchSize != 0 {
		n += 1 + sovOrderbook(uint64(m.MaxBatchSize))
	}
	return n
}

func sovOrderbook(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOrderbook(x uint64) (n int) {
	return sovOrderbook(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pair == nil {
				m.Pair = &currency.Pair{}
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exchange", wireType)
			}
			m.Exchange = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exchange |= (exchange.Exchange(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Start == nil {
				m.Start = &google_protobuf1.Timestamp{}
			}
			if err := m.Start.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.End == nil {
				m.End = &google_protobuf1.Timestamp{}
			}
			if err := m.End.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBatchSize", wireType)
			}
			m.MaxBatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBatchSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrderbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrderbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrderbook(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrderbook
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOrderbook
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOrderbook
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOrderbook(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOrderbook = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrderbook   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/crypto-bank/proto/orderbook/orderbook.proto", fileDescriptorOrderbook)
}

var fileDescriptorOrderbook = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xc1, 0x4e, 0xf2, 0x40,
	0x10, 0x66, 0x7f, 0xe0, 0x8f, 0x2c, 0x09, 0x87, 0x3d, 0x90, 0xa6, 0x31, 0x95, 0x10, 0x13, 0xf1,
	0xc0, 0x62, 0xaa, 0xf1, 0xe0, 0x4d, 0x12, 0xe2, 0x51, 0x43, 0x3c, 0x79, 0x21, 0xdb, 0x65, 0x2c,
	0x0d, 0xb6, 0x53, 0xb7, 0x5b, 0x03, 0x3e, 0x85, 0x8f, 0xe1, 0x4b, 0x78, 0xf7, 0xe8, 0x23, 0x98,
	0xfa, 0x22, 0xa6, 0x2d, 0xb4, 0xbd, 0xa8, 0xdc, 0xbe, 0x99, 0x9d, 0xef, 0xdb, 0x6f, 0xbe, 0x0c,
	0x3d, 0x77, 0x3d, 0xbd, 0x88, 0x1d, 0x2e, 0xd1, 0x1f, 0x49, 0xb5, 0x0e, 0x35, 0x0e, 0x1d, 0x11,
	0x2c, 0x47, 0xa1, 0x42, 0x8d, 0x23, 0x54, 0x73, 0x50, 0x0e, 0xe2, 0xb2, 0x44, 0x3c, 0x7b, 0x61,
	0xad, 0xa2, 0x61, 0x0e, 0x2b, 0x12, 0x2e, 0xba, 0x98, 0x73, 0x9d, 0xf8, 0x3e, 0xab, 0x72, 0xa1,
	0x14, 0xe5, 0x4c, 0xf3, 0xf2, 0xc7, 0xf1, 0x0a, 0x0f, 0xdd, 0x07, 0x28, 0x6b, 0xed, 0xf9, 0x10,
	0x69, 0xe1, 0x87, 0x1b, 0x89, 0xb3, 0x5f, 0x4d, 0xc3, 0x4a, 0x2e, 0x44, 0xe0, 0x42, 0x01, 0x76,
	0x62, 0xc9, 0x58, 0x29, 0x08, 0xe4, 0xba, 0x00, 0x1b, 0x96, 0xbd, 0x63, 0x40, 0xf0, 0x04, 0x81,
	0xce, 0x39, 0xfd, 0x37, 0x42, 0xdb, 0x53, 0x10, 0xf3, 0x29, 0x3c, 0xc6, 0x10, 0x69, 0xb6, 0x4f,
	0x1b, 0xa1, 0xf0, 0x94, 0x41, 0x7a, 0x64, 0xd0, 0xb6, 0x3b, 0xbc, 0xf8, 0xe2, 0x46, 0x78, 0x8a,
	0x1d, 0xd2, 0xbd, 0xad, 0x53, 0xe3, 0x5f, 0x8f, 0x0c, 0x3a, 0x36, 0xe3, 0x85, 0xf5, 0xc9, 0x06,
	0xb0, 0x63, 0xda, 0x8c, 0xb4, 0x50, 0xda, 0xa8, 0x67, 0x22, 0x26, 0xcf, 0x43, 0xe2, 0xdb, 0x90,
	0xf8, 0xed, 0x36, 0x24, 0x76, 0x44, 0xeb, 0x10, 0xcc, 0x8d, 0xc6, 0x9f, 0x83, 0x5d, 0xda, 0xf1,
	0xc5, 0x6a, 0xe6, 0x08, 0x2d, 0x17, 0xb3, 0xc8, 0x7b, 0x06, 0xa3, 0xd9, 0x23, 0x83, 0xba, 0x7d,
	0x45, 0x5b, 0xd7, 0xe9, 0x62, 0x63, 0xc4, 0x25, 0xbb, 0xa0, 0x8d, 0x74, 0x17, 0xd6, 0xe5, 0xe5,
	0x0d, 0x54, 0x96, 0x33, 0xab, 0xfd, 0x71, 0xaa, 0x34, 0x49, 0x93, 0x88, 0xfa, 0xb5, 0x13, 0x32,
	0x3e, 0x78, 0x4d, 0x2c, 0xf2, 0x9e, 0x58, 0xe4, 0x23, 0xb1, 0xc8, 0x67, 0x62, 0x91, 0x97, 0x2f,
	0xab, 0x76, 0x57, 0xde, 0x8e, 0xf3, 0x3f, 0x73, 0x75, 0xfa, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x34,
	0xce, 0xe0, 0xd0, 0x87, 0x02, 0x00, 0x00,
}
